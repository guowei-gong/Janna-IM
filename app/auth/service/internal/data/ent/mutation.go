// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Janna-IM/app/auth/service/internal/data/ent/predicate"
	"Janna-IM/app/auth/service/internal/data/ent/user"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUser = "User"
)

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	user_id                *string
	name                   *string
	face_url               *string
	phone_number           *string
	email                  *string
	ex                     *string
	create_ip              *string
	last_login_ip          *string
	invitation_code        *string
	gender                 *int32
	addgender              *int32
	login_times            *int32
	addlogin_times         *int32
	login_limit            *int32
	addlogin_limit         *int32
	app_manger_level       *int32
	addapp_manger_level    *int32
	global_recv_msg_opt    *int32
	addglobal_recv_msg_opt *int32
	status                 *int32
	addstatus              *int32
	birth                  *time.Time
	create_time            *time.Time
	last_login_time        *time.Time
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*User, error)
	predicates             []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *UserMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserMutation) ResetUserID() {
	m.user_id = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetFaceURL sets the "face_url" field.
func (m *UserMutation) SetFaceURL(s string) {
	m.face_url = &s
}

// FaceURL returns the value of the "face_url" field in the mutation.
func (m *UserMutation) FaceURL() (r string, exists bool) {
	v := m.face_url
	if v == nil {
		return
	}
	return *v, true
}

// OldFaceURL returns the old "face_url" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFaceURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFaceURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFaceURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFaceURL: %w", err)
	}
	return oldValue.FaceURL, nil
}

// ResetFaceURL resets all changes to the "face_url" field.
func (m *UserMutation) ResetFaceURL() {
	m.face_url = nil
}

// SetPhoneNumber sets the "phone_number" field.
func (m *UserMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *UserMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *UserMutation) ResetPhoneNumber() {
	m.phone_number = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetEx sets the "ex" field.
func (m *UserMutation) SetEx(s string) {
	m.ex = &s
}

// Ex returns the value of the "ex" field in the mutation.
func (m *UserMutation) Ex() (r string, exists bool) {
	v := m.ex
	if v == nil {
		return
	}
	return *v, true
}

// OldEx returns the old "ex" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEx: %w", err)
	}
	return oldValue.Ex, nil
}

// ResetEx resets all changes to the "ex" field.
func (m *UserMutation) ResetEx() {
	m.ex = nil
}

// SetCreateIP sets the "create_ip" field.
func (m *UserMutation) SetCreateIP(s string) {
	m.create_ip = &s
}

// CreateIP returns the value of the "create_ip" field in the mutation.
func (m *UserMutation) CreateIP() (r string, exists bool) {
	v := m.create_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateIP returns the old "create_ip" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateIP: %w", err)
	}
	return oldValue.CreateIP, nil
}

// ResetCreateIP resets all changes to the "create_ip" field.
func (m *UserMutation) ResetCreateIP() {
	m.create_ip = nil
}

// SetLastLoginIP sets the "last_login_ip" field.
func (m *UserMutation) SetLastLoginIP(s string) {
	m.last_login_ip = &s
}

// LastLoginIP returns the value of the "last_login_ip" field in the mutation.
func (m *UserMutation) LastLoginIP() (r string, exists bool) {
	v := m.last_login_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginIP returns the old "last_login_ip" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastLoginIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginIP: %w", err)
	}
	return oldValue.LastLoginIP, nil
}

// ResetLastLoginIP resets all changes to the "last_login_ip" field.
func (m *UserMutation) ResetLastLoginIP() {
	m.last_login_ip = nil
}

// SetInvitationCode sets the "invitation_code" field.
func (m *UserMutation) SetInvitationCode(s string) {
	m.invitation_code = &s
}

// InvitationCode returns the value of the "invitation_code" field in the mutation.
func (m *UserMutation) InvitationCode() (r string, exists bool) {
	v := m.invitation_code
	if v == nil {
		return
	}
	return *v, true
}

// OldInvitationCode returns the old "invitation_code" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldInvitationCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvitationCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvitationCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvitationCode: %w", err)
	}
	return oldValue.InvitationCode, nil
}

// ResetInvitationCode resets all changes to the "invitation_code" field.
func (m *UserMutation) ResetInvitationCode() {
	m.invitation_code = nil
}

// SetGender sets the "gender" field.
func (m *UserMutation) SetGender(i int32) {
	m.gender = &i
	m.addgender = nil
}

// Gender returns the value of the "gender" field in the mutation.
func (m *UserMutation) Gender() (r int32, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGender(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// AddGender adds i to the "gender" field.
func (m *UserMutation) AddGender(i int32) {
	if m.addgender != nil {
		*m.addgender += i
	} else {
		m.addgender = &i
	}
}

// AddedGender returns the value that was added to the "gender" field in this mutation.
func (m *UserMutation) AddedGender() (r int32, exists bool) {
	v := m.addgender
	if v == nil {
		return
	}
	return *v, true
}

// ResetGender resets all changes to the "gender" field.
func (m *UserMutation) ResetGender() {
	m.gender = nil
	m.addgender = nil
}

// SetLoginTimes sets the "login_times" field.
func (m *UserMutation) SetLoginTimes(i int32) {
	m.login_times = &i
	m.addlogin_times = nil
}

// LoginTimes returns the value of the "login_times" field in the mutation.
func (m *UserMutation) LoginTimes() (r int32, exists bool) {
	v := m.login_times
	if v == nil {
		return
	}
	return *v, true
}

// OldLoginTimes returns the old "login_times" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLoginTimes(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLoginTimes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLoginTimes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLoginTimes: %w", err)
	}
	return oldValue.LoginTimes, nil
}

// AddLoginTimes adds i to the "login_times" field.
func (m *UserMutation) AddLoginTimes(i int32) {
	if m.addlogin_times != nil {
		*m.addlogin_times += i
	} else {
		m.addlogin_times = &i
	}
}

// AddedLoginTimes returns the value that was added to the "login_times" field in this mutation.
func (m *UserMutation) AddedLoginTimes() (r int32, exists bool) {
	v := m.addlogin_times
	if v == nil {
		return
	}
	return *v, true
}

// ResetLoginTimes resets all changes to the "login_times" field.
func (m *UserMutation) ResetLoginTimes() {
	m.login_times = nil
	m.addlogin_times = nil
}

// SetLoginLimit sets the "login_limit" field.
func (m *UserMutation) SetLoginLimit(i int32) {
	m.login_limit = &i
	m.addlogin_limit = nil
}

// LoginLimit returns the value of the "login_limit" field in the mutation.
func (m *UserMutation) LoginLimit() (r int32, exists bool) {
	v := m.login_limit
	if v == nil {
		return
	}
	return *v, true
}

// OldLoginLimit returns the old "login_limit" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLoginLimit(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLoginLimit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLoginLimit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLoginLimit: %w", err)
	}
	return oldValue.LoginLimit, nil
}

// AddLoginLimit adds i to the "login_limit" field.
func (m *UserMutation) AddLoginLimit(i int32) {
	if m.addlogin_limit != nil {
		*m.addlogin_limit += i
	} else {
		m.addlogin_limit = &i
	}
}

// AddedLoginLimit returns the value that was added to the "login_limit" field in this mutation.
func (m *UserMutation) AddedLoginLimit() (r int32, exists bool) {
	v := m.addlogin_limit
	if v == nil {
		return
	}
	return *v, true
}

// ResetLoginLimit resets all changes to the "login_limit" field.
func (m *UserMutation) ResetLoginLimit() {
	m.login_limit = nil
	m.addlogin_limit = nil
}

// SetAppMangerLevel sets the "app_manger_level" field.
func (m *UserMutation) SetAppMangerLevel(i int32) {
	m.app_manger_level = &i
	m.addapp_manger_level = nil
}

// AppMangerLevel returns the value of the "app_manger_level" field in the mutation.
func (m *UserMutation) AppMangerLevel() (r int32, exists bool) {
	v := m.app_manger_level
	if v == nil {
		return
	}
	return *v, true
}

// OldAppMangerLevel returns the old "app_manger_level" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAppMangerLevel(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppMangerLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppMangerLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppMangerLevel: %w", err)
	}
	return oldValue.AppMangerLevel, nil
}

// AddAppMangerLevel adds i to the "app_manger_level" field.
func (m *UserMutation) AddAppMangerLevel(i int32) {
	if m.addapp_manger_level != nil {
		*m.addapp_manger_level += i
	} else {
		m.addapp_manger_level = &i
	}
}

// AddedAppMangerLevel returns the value that was added to the "app_manger_level" field in this mutation.
func (m *UserMutation) AddedAppMangerLevel() (r int32, exists bool) {
	v := m.addapp_manger_level
	if v == nil {
		return
	}
	return *v, true
}

// ResetAppMangerLevel resets all changes to the "app_manger_level" field.
func (m *UserMutation) ResetAppMangerLevel() {
	m.app_manger_level = nil
	m.addapp_manger_level = nil
}

// SetGlobalRecvMsgOpt sets the "global_recv_msg_opt" field.
func (m *UserMutation) SetGlobalRecvMsgOpt(i int32) {
	m.global_recv_msg_opt = &i
	m.addglobal_recv_msg_opt = nil
}

// GlobalRecvMsgOpt returns the value of the "global_recv_msg_opt" field in the mutation.
func (m *UserMutation) GlobalRecvMsgOpt() (r int32, exists bool) {
	v := m.global_recv_msg_opt
	if v == nil {
		return
	}
	return *v, true
}

// OldGlobalRecvMsgOpt returns the old "global_recv_msg_opt" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGlobalRecvMsgOpt(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGlobalRecvMsgOpt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGlobalRecvMsgOpt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGlobalRecvMsgOpt: %w", err)
	}
	return oldValue.GlobalRecvMsgOpt, nil
}

// AddGlobalRecvMsgOpt adds i to the "global_recv_msg_opt" field.
func (m *UserMutation) AddGlobalRecvMsgOpt(i int32) {
	if m.addglobal_recv_msg_opt != nil {
		*m.addglobal_recv_msg_opt += i
	} else {
		m.addglobal_recv_msg_opt = &i
	}
}

// AddedGlobalRecvMsgOpt returns the value that was added to the "global_recv_msg_opt" field in this mutation.
func (m *UserMutation) AddedGlobalRecvMsgOpt() (r int32, exists bool) {
	v := m.addglobal_recv_msg_opt
	if v == nil {
		return
	}
	return *v, true
}

// ResetGlobalRecvMsgOpt resets all changes to the "global_recv_msg_opt" field.
func (m *UserMutation) ResetGlobalRecvMsgOpt() {
	m.global_recv_msg_opt = nil
	m.addglobal_recv_msg_opt = nil
}

// SetStatus sets the "status" field.
func (m *UserMutation) SetStatus(i int32) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *UserMutation) Status() (r int32, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStatus(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *UserMutation) AddStatus(i int32) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *UserMutation) AddedStatus() (r int32, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *UserMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetBirth sets the "birth" field.
func (m *UserMutation) SetBirth(t time.Time) {
	m.birth = &t
}

// Birth returns the value of the "birth" field in the mutation.
func (m *UserMutation) Birth() (r time.Time, exists bool) {
	v := m.birth
	if v == nil {
		return
	}
	return *v, true
}

// OldBirth returns the old "birth" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBirth(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirth: %w", err)
	}
	return oldValue.Birth, nil
}

// ResetBirth resets all changes to the "birth" field.
func (m *UserMutation) ResetBirth() {
	m.birth = nil
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetLastLoginTime sets the "last_login_time" field.
func (m *UserMutation) SetLastLoginTime(t time.Time) {
	m.last_login_time = &t
}

// LastLoginTime returns the value of the "last_login_time" field in the mutation.
func (m *UserMutation) LastLoginTime() (r time.Time, exists bool) {
	v := m.last_login_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginTime returns the old "last_login_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastLoginTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginTime: %w", err)
	}
	return oldValue.LastLoginTime, nil
}

// ResetLastLoginTime resets all changes to the "last_login_time" field.
func (m *UserMutation) ResetLastLoginTime() {
	m.last_login_time = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.user_id != nil {
		fields = append(fields, user.FieldUserID)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.face_url != nil {
		fields = append(fields, user.FieldFaceURL)
	}
	if m.phone_number != nil {
		fields = append(fields, user.FieldPhoneNumber)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.ex != nil {
		fields = append(fields, user.FieldEx)
	}
	if m.create_ip != nil {
		fields = append(fields, user.FieldCreateIP)
	}
	if m.last_login_ip != nil {
		fields = append(fields, user.FieldLastLoginIP)
	}
	if m.invitation_code != nil {
		fields = append(fields, user.FieldInvitationCode)
	}
	if m.gender != nil {
		fields = append(fields, user.FieldGender)
	}
	if m.login_times != nil {
		fields = append(fields, user.FieldLoginTimes)
	}
	if m.login_limit != nil {
		fields = append(fields, user.FieldLoginLimit)
	}
	if m.app_manger_level != nil {
		fields = append(fields, user.FieldAppMangerLevel)
	}
	if m.global_recv_msg_opt != nil {
		fields = append(fields, user.FieldGlobalRecvMsgOpt)
	}
	if m.status != nil {
		fields = append(fields, user.FieldStatus)
	}
	if m.birth != nil {
		fields = append(fields, user.FieldBirth)
	}
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.last_login_time != nil {
		fields = append(fields, user.FieldLastLoginTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserID:
		return m.UserID()
	case user.FieldName:
		return m.Name()
	case user.FieldFaceURL:
		return m.FaceURL()
	case user.FieldPhoneNumber:
		return m.PhoneNumber()
	case user.FieldEmail:
		return m.Email()
	case user.FieldEx:
		return m.Ex()
	case user.FieldCreateIP:
		return m.CreateIP()
	case user.FieldLastLoginIP:
		return m.LastLoginIP()
	case user.FieldInvitationCode:
		return m.InvitationCode()
	case user.FieldGender:
		return m.Gender()
	case user.FieldLoginTimes:
		return m.LoginTimes()
	case user.FieldLoginLimit:
		return m.LoginLimit()
	case user.FieldAppMangerLevel:
		return m.AppMangerLevel()
	case user.FieldGlobalRecvMsgOpt:
		return m.GlobalRecvMsgOpt()
	case user.FieldStatus:
		return m.Status()
	case user.FieldBirth:
		return m.Birth()
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldLastLoginTime:
		return m.LastLoginTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUserID:
		return m.OldUserID(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldFaceURL:
		return m.OldFaceURL(ctx)
	case user.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldEx:
		return m.OldEx(ctx)
	case user.FieldCreateIP:
		return m.OldCreateIP(ctx)
	case user.FieldLastLoginIP:
		return m.OldLastLoginIP(ctx)
	case user.FieldInvitationCode:
		return m.OldInvitationCode(ctx)
	case user.FieldGender:
		return m.OldGender(ctx)
	case user.FieldLoginTimes:
		return m.OldLoginTimes(ctx)
	case user.FieldLoginLimit:
		return m.OldLoginLimit(ctx)
	case user.FieldAppMangerLevel:
		return m.OldAppMangerLevel(ctx)
	case user.FieldGlobalRecvMsgOpt:
		return m.OldGlobalRecvMsgOpt(ctx)
	case user.FieldStatus:
		return m.OldStatus(ctx)
	case user.FieldBirth:
		return m.OldBirth(ctx)
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldLastLoginTime:
		return m.OldLastLoginTime(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldFaceURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFaceURL(v)
		return nil
	case user.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldEx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEx(v)
		return nil
	case user.FieldCreateIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateIP(v)
		return nil
	case user.FieldLastLoginIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginIP(v)
		return nil
	case user.FieldInvitationCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvitationCode(v)
		return nil
	case user.FieldGender:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case user.FieldLoginTimes:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLoginTimes(v)
		return nil
	case user.FieldLoginLimit:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLoginLimit(v)
		return nil
	case user.FieldAppMangerLevel:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppMangerLevel(v)
		return nil
	case user.FieldGlobalRecvMsgOpt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGlobalRecvMsgOpt(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case user.FieldBirth:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirth(v)
		return nil
	case user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldLastLoginTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginTime(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addgender != nil {
		fields = append(fields, user.FieldGender)
	}
	if m.addlogin_times != nil {
		fields = append(fields, user.FieldLoginTimes)
	}
	if m.addlogin_limit != nil {
		fields = append(fields, user.FieldLoginLimit)
	}
	if m.addapp_manger_level != nil {
		fields = append(fields, user.FieldAppMangerLevel)
	}
	if m.addglobal_recv_msg_opt != nil {
		fields = append(fields, user.FieldGlobalRecvMsgOpt)
	}
	if m.addstatus != nil {
		fields = append(fields, user.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldGender:
		return m.AddedGender()
	case user.FieldLoginTimes:
		return m.AddedLoginTimes()
	case user.FieldLoginLimit:
		return m.AddedLoginLimit()
	case user.FieldAppMangerLevel:
		return m.AddedAppMangerLevel()
	case user.FieldGlobalRecvMsgOpt:
		return m.AddedGlobalRecvMsgOpt()
	case user.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldGender:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGender(v)
		return nil
	case user.FieldLoginTimes:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLoginTimes(v)
		return nil
	case user.FieldLoginLimit:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLoginLimit(v)
		return nil
	case user.FieldAppMangerLevel:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAppMangerLevel(v)
		return nil
	case user.FieldGlobalRecvMsgOpt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGlobalRecvMsgOpt(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUserID:
		m.ResetUserID()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldFaceURL:
		m.ResetFaceURL()
		return nil
	case user.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldEx:
		m.ResetEx()
		return nil
	case user.FieldCreateIP:
		m.ResetCreateIP()
		return nil
	case user.FieldLastLoginIP:
		m.ResetLastLoginIP()
		return nil
	case user.FieldInvitationCode:
		m.ResetInvitationCode()
		return nil
	case user.FieldGender:
		m.ResetGender()
		return nil
	case user.FieldLoginTimes:
		m.ResetLoginTimes()
		return nil
	case user.FieldLoginLimit:
		m.ResetLoginLimit()
		return nil
	case user.FieldAppMangerLevel:
		m.ResetAppMangerLevel()
		return nil
	case user.FieldGlobalRecvMsgOpt:
		m.ResetGlobalRecvMsgOpt()
		return nil
	case user.FieldStatus:
		m.ResetStatus()
		return nil
	case user.FieldBirth:
		m.ResetBirth()
		return nil
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldLastLoginTime:
		m.ResetLastLoginTime()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
